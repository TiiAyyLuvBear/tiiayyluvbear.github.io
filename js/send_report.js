require('dotenv').config();
const axios = require('axios');
const nodemailer = require('nodemailer');

const firebaseURL = process.env.FIREBASE_URL;
const EMAIL_TO = process.env.EMAIL_TO;

async function run() {
    try {
        const res = await axios.get(firebaseURL);
        const data = res.data;

        if (!data) {
            console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ Firebase.");
            return;
        }

        // Gom nh√≥m d·ªØ li·ªáu theo ng√†y
        const groups = {};

        Object.values(data).forEach(item => {
            const timestamp = item.time;
            if (!timestamp || !timestamp.includes(" ")) return;

            const [date] = timestamp.split(" ");
            if (!groups[date]) {
                groups[date] = {
                    tempSum: 0, tempCount: 0,
                    humSum: 0, humCount: 0
                };
            }

            const temp = parseFloat(item.temperature);
            const hum = parseFloat(item.humidity);

            if (!isNaN(temp)) {
                groups[date].tempSum += temp;
                groups[date].tempCount++;
            }

            if (!isNaN(hum)) {
                groups[date].humSum += hum;
                groups[date].humCount++;
            }
        });

        // T·∫°o HTML b√°o c√°o
        let html = `
            <h2>B√°o c√°o trung b√¨nh nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m theo ng√†y</h2>
            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse;">
                <thead>
                    <tr style="background-color: #f2f2f2;">
                        <th>Ng√†y</th>
                        <th>Nhi·ªát ƒë·ªô TB (¬∞C)</th>
                        <th>ƒê·ªô ·∫©m TB (%)</th>
                    </tr>
                </thead>
                <tbody>
        `;

        const dates = Object.keys(groups).sort();
        for (let date of dates) {
            const group = groups[date];
            const tempAvg = (group.tempCount > 0) ? (group.tempSum / group.tempCount).toFixed(2) : "N/A";
            const humAvg = (group.humCount > 0) ? (group.humSum / group.humCount).toFixed(2) : "N/A";

            html += `
                <tr>
                    <td>${date}</td>
                    <td>${tempAvg}</td>
                    <td>${humAvg}</td>
                </tr>
            `;
        }

        html += `</tbody></table>`;

        // G·ª≠i email
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
            }
        });

        const info = await transporter.sendMail({
            from: `"H·ªá th·ªëng gi√°m s√°t" <${process.env.EMAIL_USER}>`,
            to: EMAIL_TO,
            subject: `B√°o c√°o c·∫£m bi·∫øn ng√†y ${new Date().toLocaleDateString('vi-VN')}`,
            html: html
        });

        console.log("üìß G·ª≠i th√†nh c√¥ng:", EMAIL_TO);

    } catch (err) {
        console.error("‚ùå L·ªói:", err.message || err);
    }
}

// G·ªçi l·∫ßn ƒë·∫ßu ngay khi ch·∫°y
run();

// L·∫∑p l·∫°i m·ªói gi·ªù
setInterval(run, 60 * 60 * 1000);  // 1 gi·ªù
